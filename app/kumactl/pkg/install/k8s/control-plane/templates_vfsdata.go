// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package controlplane

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 7, 7, 21, 2, 22, 428751994, time.UTC),
		},
		"/crds": &vfsgen۰DirInfo{
			name:    "crds",
			modTime: time.Date(2020, 7, 9, 21, 58, 26, 933586689, time.UTC),
		},
		"/crds/kuma.io_circuitbreaker.yaml": &vfsgen۰CompressedFileInfo{
			name:             "kuma.io_circuitbreaker.yaml",
			modTime:          time.Date(2020, 7, 9, 21, 58, 26, 925586694, time.UTC),
			uncompressedSize: 571,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x3d\xae\xdb\x30\x10\x84\x7b\x9e\x62\x2e\x20\x05\x46\x9a\x80\x9d\x93\x34\x6e\x02\x23\x09\xdc\xaf\xa9\xb5\xb5\x91\xf8\x83\x25\x29\x24\xb7\x0f\xf4\x07\x3c\x3d\xe3\xb1\xdb\x6f\xb8\x83\x9d\x31\x4d\xd3\x18\x4a\x72\x63\xcd\x12\x83\x05\x25\xe1\xbf\x85\xc3\x3c\xe5\x76\xf8\x92\x5b\x89\x9f\xa6\x93\x19\x24\x74\x16\xdf\x6a\x2e\xd1\xff\xe4\x1c\xab\x3a\xfe\xce\x0f\x09\x52\x24\x06\xe3\xb9\x50\x47\x85\xac\x01\x9c\x32\xcd\xf0\xb7\x78\xce\x85\x7c\xb2\x08\x75\x1c\x0d\x10\xc8\xb3\x85\x13\x75\x55\xca\x5d\x99\x06\xd6\xdc\x0e\xd5\x53\x2b\xd1\xe4\xc4\x6e\xde\x7f\x6a\xac\xc9\x62\xc7\xeb\x5a\x9e\x15\x60\x3b\x63\x75\xf8\xba\x3a\x2c\x42\x1a\xab\xd2\xf8\x62\x6e\x80\xec\x62\x62\x8b\x1f\xb3\x49\x22\xc7\x9d\x01\xa6\x35\xee\x66\xda\x6c\x87\x4d\x27\x1a\x53\x4f\xa7\x05\x02\x99\x75\xe2\xce\xa2\x68\xe5\x1d\x95\xa8\xf4\xe4\x23\x73\x3d\x7b\xb2\xdb\x04\xc4\xc4\xe1\x7c\xbd\xdc\x3e\xff\x7a\x27\x00\x1d\x67\xa7\x92\xca\xd2\xf4\x31\x04\x24\xa3\xf4\x8c\x75\x09\x8f\xa8\xcb\x78\x8c\x83\xf3\xf5\xf2\xc6\x2e\x69\x4c\xac\x45\xf6\x72\xf6\xe7\x39\xf7\x47\x02\x94\x7f\x73\x09\xb9\xa8\x84\xe7\x41\xda\x5b\x7f\xfd\x1c\xef\x7f\xd8\x15\xf3\x01\x36\xff\x03\x00\x00\xff\xff\x0c\x03\x10\x49\x3b\x02\x00\x00"),
		},
		"/crds/kuma.io_dataplaneinsights.yaml": &vfsgen۰CompressedFileInfo{
			name:             "kuma.io_dataplaneinsights.yaml",
			modTime:          time.Date(2020, 7, 9, 21, 58, 26, 929586692, time.UTC),
			uncompressedSize: 610,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x31\xaf\xdb\x30\x0c\x84\x77\xfd\x0a\x22\xbb\x5d\x04\x5d\x0a\x6d\x41\xb3\x64\x09\x82\xb6\xc8\x52\x74\x60\x25\x26\x56\x63\x4b\x84\x48\x19\xed\xbf\x2f\x64\x3d\xe7\xbd\x04\xf1\xc6\x8f\xe6\xf9\xee\x6c\xba\xae\x33\xc8\xe1\x4c\x59\x42\x8a\x16\x90\x03\xfd\x55\x8a\x75\x92\xfe\xf6\x45\xfa\x90\x3e\xcd\x5b\x73\x0b\xd1\x5b\xf8\x5a\x44\xd3\xf4\x8d\x24\x95\xec\x68\x4f\x97\x10\x83\x86\x14\xcd\x44\x8a\x1e\x15\xad\x01\x70\x99\xb0\xc2\x1f\x61\x22\x51\x9c\xd8\x42\x2c\xe3\x68\x00\x22\x4e\x64\xa1\xbe\xc7\x23\x46\x0a\x51\xc2\x75\x50\xe9\x6f\x65\xc2\x3e\x24\x23\x4c\xae\x2a\x5c\x73\x2a\x6c\x61\xc5\xed\x50\xea\x06\xa0\x19\xd9\xaf\x1a\x87\xa6\xb1\xac\x78\x2c\x19\xc7\x17\x1f\x30\x00\xe2\x12\x93\x85\x63\x15\x62\x74\xe4\x0d\xc0\xdc\x42\x2f\xc2\xdd\x9b\xb9\x79\x8b\x23\x0f\xb8\x5d\x04\x85\xf2\x4c\xde\x82\xe6\x42\x0d\x68\xca\x78\xa5\x8f\xc4\x0d\x34\x61\xb3\x06\x90\x98\xe2\xee\x74\x38\x7f\xfe\xfe\x80\x01\x3c\x89\xcb\x81\x75\xe9\xf8\xd9\x3c\x04\x01\x1d\x08\xda\x11\x5c\x52\x5e\xc6\x7b\x0c\x58\x73\xc0\xee\x74\xb8\x4b\x72\x4e\x4c\x59\xc3\x5a\x4c\x7b\x44\x51\xcb\x03\x01\xd0\x7f\x35\x7a\xfa\xfd\x87\x9c\x9a\x97\xf0\xfd\x0a\x9d\x23\x56\xf2\xc7\xe7\xc6\x37\x9b\x87\x8e\x97\xd1\xa5\xe8\x97\xff\x2f\x16\x7e\xfe\x32\xad\x1f\xf2\xe7\xb5\xd7\x0a\xff\x07\x00\x00\xff\xff\x8d\x73\xa3\x1b\x62\x02\x00\x00"),
		},
		"/crds/kuma.io_dataplanes.yaml": &vfsgen۰CompressedFileInfo{
			name:             "kuma.io_dataplanes.yaml",
			modTime:          time.Date(2020, 7, 9, 21, 58, 26, 869586726, time.UTC),
			uncompressedSize: 572,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xbf\x6e\xf3\x30\x0c\xc4\x77\x3d\x05\x91\xdd\xfe\x10\x7c\x4b\xa1\x2d\x68\x96\x2c\x41\xd0\x16\x59\x8a\x0e\xac\xc4\x24\x6a\x6c\x49\x10\x29\xa3\x7d\xfb\x42\x52\x9d\x3f\x45\xb5\xf1\x67\xde\xe1\x78\x56\x5d\xd7\x29\x8c\x6e\x4f\x89\x5d\xf0\x1a\x30\x3a\xfa\x14\xf2\x65\xe2\xfe\xfc\xc0\xbd\x0b\xff\xa6\xa5\x3a\x3b\x6f\x35\x3c\x66\x96\x30\x3e\x11\x87\x9c\x0c\xad\xe9\xe0\xbc\x13\x17\xbc\x1a\x49\xd0\xa2\xa0\x56\x00\x26\x11\x16\xf8\xe2\x46\x62\xc1\x31\x6a\xf0\x79\x18\x14\x80\xc7\x91\x34\x94\xbd\x38\xa0\x27\xee\xcf\x79\xc4\xde\x05\xc5\x91\x4c\x91\x1e\x53\xc8\x51\xc3\x8c\x9b\x82\xcb\x17\x80\x96\x60\x3d\x8b\x2b\x8b\x43\x4e\x38\xdc\x5a\x2a\x00\x36\x21\x92\x86\x6d\x91\x46\x34\x64\x15\xc0\xd4\xee\xab\x56\xdd\x4f\x8e\x69\x89\x43\x3c\xe1\xb2\x3a\x31\xa5\x89\xac\x06\x49\xb9\x59\xb3\x84\x84\x47\xba\x25\xe6\x44\x23\xb6\x30\x00\x21\x92\x5f\xed\x36\xfb\xff\xcf\x77\x18\xc0\x12\x9b\xe4\xa2\xd4\x3a\x2f\x71\xc1\x31\xc8\x89\xa0\x6d\xc3\x21\xa4\x3a\x5e\x83\xc3\x6a\xb7\xb9\x78\xc4\x14\x22\x25\x71\xf3\xed\xed\xcd\x2d\x5d\x9f\x7c\x95\x4b\xc3\xfb\x07\x19\x51\x7f\x42\x16\x94\x5c\x5d\xd0\x18\x8a\x42\x76\xfb\xbb\xd2\xc5\xe2\xae\xcb\x3a\x9a\xe0\x6d\xfd\xb3\xac\xe1\xf5\x4d\xb5\x3a\xc8\xee\xe7\x1a\x0b\xfc\x0e\x00\x00\xff\xff\x28\x5b\x03\x66\x3c\x02\x00\x00"),
		},
		"/crds/kuma.io_faultinjection.yaml": &vfsgen۰CompressedFileInfo{
			name:             "kuma.io_faultinjection.yaml",
			modTime:          time.Date(2020, 7, 9, 21, 58, 26, 905586705, time.UTC),
			uncompressedSize: 571,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcd\x8e\xdb\x30\x0c\x84\xef\x7a\x8a\x79\x01\xa7\x08\x7a\x29\x74\x0b\x5a\x14\xc8\xa5\x08\xda\x22\x77\xae\xcc\xc4\xdc\x58\x3f\x90\x28\x63\xf7\xed\x17\xb2\x63\x60\x9d\x60\x75\xe3\x37\xe2\x90\x1c\xd3\x75\x9d\xa1\x24\x67\xce\x45\x62\xb0\xa0\x24\xfc\xa6\x1c\x5a\x55\x76\xb7\x1f\x65\x27\xf1\xdb\xb4\x37\x37\x09\xbd\xc5\xcf\x5a\x34\xfa\xbf\x5c\x62\xcd\x8e\x7f\xf1\x45\x82\xa8\xc4\x60\x3c\x2b\xf5\xa4\x64\x0d\xe0\x32\x53\x83\xff\xc5\x73\x51\xf2\xc9\x22\xd4\x71\x34\x40\x20\xcf\x16\x17\xaa\xa3\x4a\x78\x65\xa7\xcb\x90\xea\x69\x27\xd1\x94\xc4\xae\xf5\x5f\x73\xac\xc9\x62\xc5\x4b\x5b\x69\x0a\xb0\xac\xf1\xbb\x39\x1c\x57\x87\x59\x48\x63\xcd\x34\x3e\x99\x1b\xa0\xb8\x98\xd8\xe2\x4f\x33\x49\xe4\xb8\x37\xc0\xb4\x9c\x7b\x37\xed\xee\x8b\x4d\x7b\x1a\xd3\x40\xfb\x19\x02\x85\xf3\xc4\xbd\x85\xe6\xca\x2b\xd2\x98\xe9\xca\x5b\xe6\x06\xf6\x64\xef\x15\x10\x13\x87\xc3\xe9\x78\xfe\xfe\xef\x41\x00\x7a\x2e\x2e\x4b\xd2\x39\xe9\xed\x11\x90\x02\x1d\x18\x4b\x13\x2e\x31\xcf\xe5\xc3\x39\x38\x9c\x8e\x9f\xfc\x52\x8e\x89\xb3\xca\x9a\xce\xfa\x3c\x97\x61\x4b\x00\x7d\x6f\x29\x14\xcd\x12\xae\x1b\x69\x8d\xfd\xf9\x73\x7c\x69\x73\xcd\x17\xf8\x23\x00\x00\xff\xff\x59\x34\x33\x41\x3b\x02\x00\x00"),
		},
		"/crds/kuma.io_healthchecks.yaml": &vfsgen۰CompressedFileInfo{
			name:             "kuma.io_healthchecks.yaml",
			modTime:          time.Date(2020, 7, 9, 21, 58, 26, 909586703, time.UTC),
			uncompressedSize: 532,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xbd\x6e\xe3\x30\x10\x84\x7b\x3e\xc5\xbc\x80\x74\x30\xae\x39\xb0\x33\x7c\x45\xdc\x04\x46\x12\xb8\xdf\x50\x6b\x8b\x91\xf8\x03\xee\x4a\x48\xde\x3e\x90\x18\x07\x72\x10\x76\xfb\x71\x67\x30\x3b\xa6\x69\x1a\x43\xd9\x9f\xb9\x88\x4f\xd1\x82\xb2\xe7\x77\xe5\xb8\x4c\xd2\x0e\xff\xa4\xf5\xe9\xcf\xbc\x33\x83\x8f\x9d\xc5\x61\x12\x4d\xe1\x89\x25\x4d\xc5\xf1\x7f\xbe\xf8\xe8\xd5\xa7\x68\x02\x2b\x75\xa4\x64\x0d\xe0\x0a\xd3\x02\x5f\x7c\x60\x51\x0a\xd9\x22\x4e\xe3\x68\x80\x48\x81\x2d\x7a\xa6\x51\x7b\xd7\xb3\x1b\xa4\x1d\xa6\x40\xad\x4f\x46\x32\xbb\x45\x7c\x2d\x69\xca\x16\x37\x5c\x35\xb2\xfc\x00\x35\xc3\xc3\x2a\x3f\x2c\xf2\x95\xe6\x71\x2a\x34\xde\xdb\x1a\x40\x5c\xca\x6c\xf1\xb8\xc8\x33\x39\xee\x0c\x30\xd7\x2b\x57\xbb\xe6\x2b\xcd\xbc\xa3\x31\xf7\xb4\x5b\xbd\x84\xcb\xcc\x9d\x85\x96\x89\x2b\xd0\x54\xe8\xca\x5b\xe2\x7a\x0e\x54\x03\x01\x29\x73\xdc\x9f\x8e\xe7\xbf\xcf\x77\x18\xe8\x58\x5c\xf1\x59\xd7\x52\x37\x91\xe1\x05\xda\x33\xea\x3e\x2e\xa9\xac\xe3\x36\x3c\xf6\xa7\xe3\xb7\x4f\x2e\x29\x73\x51\x7f\xeb\xa0\xbe\xc0\xd2\x6f\x67\x40\x3f\x96\x6b\x45\x8b\x8f\xd7\xcd\xc7\xad\xd6\x9f\x8b\xe9\xf5\x8d\x9d\x9a\x5f\xe1\x67\x00\x00\x00\xff\xff\xbf\x18\xb5\x3e\x14\x02\x00\x00"),
		},
		"/crds/kuma.io_meshes.yaml": &vfsgen۰CompressedFileInfo{
			name:             "kuma.io_meshes.yaml",
			modTime:          time.Date(2020, 7, 9, 21, 52, 22, 797880966, time.UTC),
			uncompressedSize: 590,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x3d\x6f\xeb\x30\x0c\xdc\xf5\x2b\x88\xec\xf6\x43\xf0\x96\x07\x6d\x41\xde\x92\xa1\x45\xd0\x16\x59\x8a\x0e\xac\xcc\xc4\x6a\x2c\x51\x10\x29\xa3\xfd\xf7\x85\xad\xba\x49\x3a\x95\xdb\x9d\xee\xf8\x71\x32\x4d\xd3\x18\x4c\xfe\x40\x59\x3c\x47\x0b\x98\x3c\xbd\x2b\xc5\x09\x49\x7b\xfe\x27\xad\xe7\x3f\xe3\xda\x9c\x7d\xec\x2c\x6c\x8b\x28\x87\x07\x12\x2e\xd9\xd1\x7f\x3a\xfa\xe8\xd5\x73\x34\x81\x14\x3b\x54\xb4\x06\xc0\x65\xc2\x89\x7c\xf2\x81\x44\x31\x24\x0b\xb1\x0c\x83\x01\x88\x18\xc8\x42\x20\xe9\x49\xda\x73\x09\xd8\x7a\x36\x92\xc8\x4d\xb6\x53\xe6\x92\x2c\x2c\x74\x55\xcb\xf4\x02\x50\xa7\xdf\x91\xf4\x33\x4c\x43\xc9\x38\x2c\x9d\x0c\x80\x38\x4e\x64\x61\x3b\x14\x51\xca\x06\x60\xac\xf7\xcc\xf6\xe6\x6b\xee\xb8\xc6\x21\xf5\xb8\x9e\x5b\x08\xe5\x91\x3a\x0b\x9a\x0b\x55\x42\x39\xe3\x89\xae\x19\xd7\x53\xc0\xba\x00\x00\x27\x8a\x9b\xfd\xee\xf0\xf7\xf1\x86\x06\xe8\x48\x5c\xf6\x49\xe7\xf8\xa6\x15\xc1\x0b\x68\x4f\x50\x85\x70\xe4\x3c\xc3\xba\x2c\x6c\xf6\xbb\x6f\x6b\xca\x9c\x28\xab\x5f\xce\xac\xb5\x04\x72\x29\xfd\x98\xae\xe3\xd7\x37\x72\x7a\x2d\x54\xd4\x22\xbf\x90\xde\x90\x17\x17\x3a\x47\x49\xa9\xbb\xff\x19\xf4\x6a\x75\x13\xf3\x0c\x1d\xc7\x6e\xfe\x6b\xb1\xf0\xfc\x62\x6a\x60\xd4\x1d\x96\xa0\x27\xf2\x33\x00\x00\xff\xff\x08\x02\xe0\x8d\x4e\x02\x00\x00"),
		},
		"/crds/kuma.io_proxytemplates.yaml": &vfsgen۰CompressedFileInfo{
			name:             "kuma.io_proxytemplates.yaml",
			modTime:          time.Date(2020, 7, 9, 21, 58, 26, 913586700, time.UTC),
			uncompressedSize: 676,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x6f\xdc\x30\x0c\x85\x77\xfd\x0a\x22\xfb\xb9\x38\x74\x29\xb4\x05\xed\x92\x25\x38\xb4\xc1\x2d\x45\x07\x56\x62\xce\xea\x59\x12\x21\x52\x46\xf2\xef\x0b\x59\xe7\xd6\xbe\x29\xde\xf8\x44\x7e\x78\x7c\xb4\x39\x1c\x0e\x06\x39\x9c\xa9\x48\xc8\xc9\x02\x72\xa0\x37\xa5\xd4\x2a\x19\xae\x5f\x64\x08\xf9\xd3\x7c\x34\xd7\x90\xbc\x85\xaf\x55\x34\xc7\xef\x24\xb9\x16\x47\xdf\xe8\x35\xa4\xa0\x21\x27\x13\x49\xd1\xa3\xa2\x35\x00\xae\x10\x36\xf1\x25\x44\x12\xc5\xc8\x16\x52\x9d\x26\x03\x90\x30\x92\x05\x2e\xf9\xed\x5d\x29\xf2\x84\x4a\x32\x5c\x6b\xc4\x21\x64\x23\x4c\xae\x8d\x5f\x4a\xae\x6c\x61\x95\xfb\x94\xb4\x17\x80\xee\xe2\xd4\x00\x2f\x37\xc0\xa2\xf3\x54\x0b\x4e\xf7\x68\x03\x20\x2e\x33\x59\x78\x6e\x08\x46\x47\xde\x00\xcc\x7d\xd7\x05\x79\xb8\x79\x9a\x8f\x38\xf1\x88\xc7\x85\x26\x54\x66\xf2\x16\xb4\xd4\x8e\x17\xcd\x05\x2f\xb4\x55\xdc\x48\x11\xbb\x29\x80\xcc\x94\x1e\x4f\x4f\xe7\xcf\x3f\x76\x32\x80\x27\x71\x25\xb0\x2e\xd1\xee\x6c\x43\x10\xd0\x91\xa0\x4f\xc0\x6b\x2e\x4b\xb9\x5f\x00\x1e\x4f\x4f\xff\x58\x5c\x32\x53\xd1\xb0\x66\xd1\xbf\x48\x32\x6e\x6b\x00\x7d\x6f\x1b\x8b\x96\x90\x2e\x9b\x87\x35\xde\xfb\xc6\xfc\xfb\x0f\x39\xdd\x36\x2a\x6a\x95\x0f\xb4\xee\xc4\xff\x53\xe8\x1c\xb1\x92\x7f\xbe\x3f\xdb\xc3\xc3\xee\x56\x4b\xe9\x72\xf2\xcb\x1f\x24\x16\x7e\xfe\x32\x3d\x6a\xf2\xe7\xf5\x44\x4d\xfc\x1b\x00\x00\xff\xff\xb9\xb6\x00\x72\xa4\x02\x00\x00"),
		},
		"/crds/kuma.io_trafficlogs.yaml": &vfsgen۰CompressedFileInfo{
			name:             "kuma.io_trafficlogs.yaml",
			modTime:          time.Date(2020, 7, 9, 21, 58, 26, 881586719, time.UTC),
			uncompressedSize: 527,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x4e\xf3\x40\x0c\x84\xef\xfb\x14\x7e\x81\xe4\x57\xf5\x5f\x50\x6e\x15\x5c\x2a\x21\x54\x41\xd5\xbb\xd9\x38\x89\x69\x76\xbd\x5a\x3b\x11\xbc\x3d\x4a\x96\x42\x8a\xd8\x9b\xbf\xf5\x8c\x66\xec\xaa\xaa\x72\x98\xf8\x4c\x59\x59\x62\x03\x98\x98\xde\x8d\xe2\x32\x69\x7d\xb9\xd3\x9a\xe5\xdf\xbc\x73\x17\x8e\x6d\x03\xf7\x93\x9a\x84\x67\x52\x99\xb2\xa7\x07\xea\x38\xb2\xb1\x44\x17\xc8\xb0\x45\xc3\xc6\x01\xf8\x4c\xb8\xc0\x13\x07\x52\xc3\x90\x1a\x88\xd3\x38\x3a\x80\x88\x81\x1a\xb0\x8c\x5d\xc7\x7e\x94\x5e\xeb\xcb\x14\xb0\x66\x71\x9a\xc8\x2f\xda\x3e\xcb\x94\x1a\xb8\xe2\x22\xd1\xe5\x07\xa0\x44\x38\x15\xf5\xa3\xf4\x2b\x4c\xe3\x94\x71\xbc\x31\x75\x00\xea\x25\x51\x03\x4f\x8b\x38\xa1\xa7\xd6\x01\xcc\xa5\xe2\x6a\x56\x7d\x45\x99\x77\x38\xa6\x01\x77\xab\x95\x52\x9e\xa9\x5d\xac\x26\x2a\xc0\x24\x63\x4f\x5b\xe2\x07\x0a\x58\xe2\x00\x48\xa2\xb8\x3f\x1e\xce\xff\x5f\x6e\x30\x40\x4b\xea\x33\x27\x5b\x2f\xfa\x13\x18\x58\xc1\x06\x82\xb2\x0e\x9d\xe4\x75\xdc\x44\x87\xfd\xf1\xf0\xed\x92\xb2\x24\xca\xc6\xd7\xfe\xe5\x05\xd2\x61\x3b\x03\xd8\xc7\xd2\x55\x2d\x73\xec\x37\x1f\xd7\x93\xfe\x5e\x94\xd7\x37\xf2\xe6\xfe\x84\x9f\x01\x00\x00\xff\xff\x85\x08\xb0\x02\x0f\x02\x00\x00"),
		},
		"/crds/kuma.io_trafficpermissions.yaml": &vfsgen۰CompressedFileInfo{
			name:             "kuma.io_trafficpermissions.yaml",
			modTime:          time.Date(2020, 7, 9, 21, 58, 26, 889586714, time.UTC),
			uncompressedSize: 562,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x6e\xea\x40\x0c\x85\xf7\xf3\x14\x7e\x81\x70\x85\xee\xa6\xca\x0e\xb5\x1b\x36\x15\x6a\x11\x7b\x77\xe2\x10\x97\xcc\x8f\x6c\x27\x6a\xdf\xbe\x9a\x0c\x20\x5a\x98\x9d\x8f\xc7\x9f\x8f\x8f\x6b\x9a\xc6\x61\xe6\x03\x89\x72\x8a\x2d\x60\x66\xfa\x32\x8a\xa5\xd2\xd5\xe9\x49\x57\x9c\xfe\xcd\x6b\x77\xe2\xd8\xb5\xf0\x3c\xa9\xa5\xf0\x46\x9a\x26\xf1\xf4\x42\x3d\x47\x36\x4e\xd1\x05\x32\xec\xd0\xb0\x75\x00\x5e\x08\x8b\xb8\xe7\x40\x6a\x18\x72\x0b\x71\x1a\x47\x07\x10\x31\x50\x0b\x26\xd8\xf7\xec\x33\x49\x60\x3d\xef\x99\x02\xae\x38\x39\xcd\xe4\x0b\xe2\x28\x69\xca\x2d\x5c\xe4\x3a\xa9\xa5\x03\x50\x9d\xec\x2b\x64\x77\x85\x2c\xbd\x3c\x4e\x82\xe3\xa3\x15\x0e\x40\x7d\xca\xd4\xc2\x6b\x41\x65\xf4\xd4\x39\x80\xb9\xde\xbd\xa0\x9b\xb3\xbf\x79\x8d\x63\x1e\x70\xbd\x10\x95\x64\xa6\xae\x10\x27\xaa\x82\x25\xc1\x23\xdd\x2a\x7e\xa0\x80\xd5\x1c\x40\xca\x14\x37\xbb\xed\xe1\xff\xfb\x2f\x19\xa0\x23\xf5\xc2\xd9\x96\x98\xef\xec\x03\x2b\xd8\x40\x50\xa7\xa0\x4f\xb2\x94\xf7\x87\xc0\x66\xb7\xbd\x32\xb3\xa4\x4c\x62\x7c\xc9\xa6\xbe\x40\x3a\xdc\xd6\x00\xf6\x5d\x2e\x57\x13\x8e\xc7\x9b\xc6\x25\xee\xbf\x1f\xd3\xc7\x27\x79\x73\x0f\xc5\x9f\x00\x00\x00\xff\xff\xd5\x0c\x4c\xf4\x32\x02\x00\x00"),
		},
		"/crds/kuma.io_trafficroutes.yaml": &vfsgen۰CompressedFileInfo{
			name:             "kuma.io_trafficroutes.yaml",
			modTime:          time.Date(2020, 7, 9, 21, 58, 26, 897586710, time.UTC),
			uncompressedSize: 537,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x6e\xe3\x30\x0c\x84\xef\x7a\x0a\xbe\x80\xbd\x08\xf6\xb2\xd0\x2d\xd8\xbd\xe4\xb2\x08\xd2\x20\x77\x56\xa6\x63\x36\xd6\x0f\x44\xca\x68\xdf\xbe\x90\xd5\x14\x4e\x50\xdd\x38\xd4\x7c\x18\x8e\xe9\xba\xce\x60\xe2\x0b\x65\xe1\x18\x2c\x60\x62\x7a\x57\x0a\x75\x92\xfe\xf6\x47\x7a\x8e\xbf\x96\x9d\xb9\x71\x18\x2c\xfc\x2d\xa2\xd1\x9f\x48\x62\xc9\x8e\xfe\xd1\xc8\x81\x95\x63\x30\x9e\x14\x07\x54\xb4\x06\xc0\x65\xc2\x2a\x9e\xd9\x93\x28\xfa\x64\x21\x94\x79\x36\x00\x01\x3d\x59\xd0\x8c\xe3\xc8\x2e\xc7\xa2\x24\xfd\xad\x78\xec\x39\x1a\x49\xe4\xaa\xfb\x9a\x63\x49\x16\xee\x72\x33\x49\xdd\x00\xb4\x10\xe7\xe6\x3f\x55\xff\x2a\xa7\xb9\x64\x9c\x9f\xc0\x06\x40\x5c\x4c\x64\xe1\x7f\x05\x24\x74\x34\x18\x80\xa5\x1d\xba\x02\xbb\xaf\x40\xcb\x0e\xe7\x34\xe1\x6e\x85\x09\xe5\x85\x86\x0a\x2b\x8d\x2e\x1a\x33\x5e\x69\xab\xb8\x89\x3c\xb6\x48\x00\x31\x51\xd8\x1f\x0f\x97\xdf\x2f\x0f\x32\xc0\x40\xe2\x32\x27\x5d\x7b\xdd\x86\x06\x16\xd0\x89\xa0\x19\x60\x8c\x79\x1d\x1f\xe2\xc3\xfe\x78\xf8\x26\xa5\x1c\x13\x65\xe5\x7b\x0f\xed\x79\x92\x69\x3b\x03\xe8\x47\xbd\x57\x34\x73\xb8\x6e\x16\xf7\x6a\x9f\x3f\xc6\xd7\x37\x72\x6a\x7e\x14\x3f\x03\x00\x00\xff\xff\x2e\x44\x31\x32\x19\x02\x00\x00"),
		},
		"/crds/kuma.io_traffictraces.yaml": &vfsgen۰CompressedFileInfo{
			name:             "kuma.io_traffictraces.yaml",
			modTime:          time.Date(2020, 7, 9, 21, 58, 26, 921586696, time.UTC),
			uncompressedSize: 537,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xbd\x6e\xe3\x40\x0c\x84\xfb\x7d\x0a\xbe\x80\x74\x30\xae\x39\xa8\x33\x2e\x8d\x9b\xc0\x48\x0c\xf7\xcc\x8a\xb2\x18\x6b\x7f\x40\x52\x42\xf2\xf6\xc1\x6a\xe3\x40\x36\xb2\x1d\x87\x3b\x1f\x86\xe3\x9a\xa6\x71\x98\xf9\x4c\xa2\x9c\x62\x07\x98\x99\x3e\x8c\x62\x99\xb4\xbd\xfe\xd3\x96\xd3\x9f\x65\xe7\xae\x1c\xfb\x0e\xfe\xcf\x6a\x29\xbc\x90\xa6\x59\x3c\x3d\xd1\xc0\x91\x8d\x53\x74\x81\x0c\x7b\x34\xec\x1c\x80\x17\xc2\x22\x9e\x38\x90\x1a\x86\xdc\x41\x9c\xa7\xc9\x01\x44\x0c\xd4\x81\x09\x0e\x03\x7b\x13\xf4\xa4\xed\x75\x0e\xd8\x72\x72\x9a\xc9\x17\xf7\x45\xd2\x9c\x3b\xb8\xc9\xd5\xa4\x65\x03\x50\x43\x9c\xaa\xff\x54\xfc\xab\x9c\xa7\x59\x70\x7a\x00\x3b\x00\xf5\x29\x53\x07\xcf\x05\x90\xd1\x53\xef\x00\x96\x7a\xe8\x0a\x6c\xbe\x03\x2d\x3b\x9c\xf2\x88\xbb\x15\xa6\x24\x0b\xf5\x05\x36\x57\xba\x5a\x12\xbc\xd0\x56\xf1\x23\x05\xac\x91\x00\x52\xa6\xb8\x3f\x1e\xce\x7f\x5f\xef\x64\x80\x9e\xd4\x0b\x67\x5b\x7b\xdd\x86\x06\x56\xb0\x91\xa0\x1a\x60\x48\xb2\x8e\x77\xf1\x61\x7f\x3c\xfc\x90\xb2\xa4\x4c\x62\x7c\xeb\xa1\xbe\x40\x3a\x6e\x67\x00\xfb\x2c\xf7\xaa\x09\xc7\xcb\x66\x71\xab\xf6\xf1\x63\x7a\x7b\x27\x6f\xee\x57\xf1\x2b\x00\x00\xff\xff\x68\xd6\xc5\x33\x19\x02\x00\x00"),
		},
		"/kuma-cp": &vfsgen۰DirInfo{
			name:    "kuma-cp",
			modTime: time.Date(2020, 7, 7, 21, 2, 22, 428751994, time.UTC),
		},
		"/kuma-cp/app.yaml": &vfsgen۰CompressedFileInfo{
			name:             "app.yaml",
			modTime:          time.Date(2020, 7, 7, 21, 2, 22, 428751994, time.UTC),
			uncompressedSize: 10026,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x4f\x73\xe2\x38\x16\xbf\xf3\x29\x54\xd9\xb3\x21\xe9\x24\x3d\x19\x57\xcd\x81\x06\x77\x96\x4d\x30\x94\xed\x64\xb7\xe7\xc2\x08\xfb\x01\x5a\x64\xcb\x23\xc9\x4c\x53\x3d\xfd\xdd\xb7\xfc\x17\x19\x64\x6c\xd2\x39\xec\xce\x72\xe8\x8a\xa5\xa7\xdf\xfb\xf7\xe3\x3d\xf9\xd1\x86\x61\xf4\x70\x4c\x5e\x81\x0b\xc2\x22\x13\xed\x6e\x7a\x5b\x12\x05\x26\x72\x81\xef\x88\x0f\xbd\x10\x24\x0e\xb0\xc4\x66\x0f\xa1\x08\x87\x60\xa2\x6f\xdf\x50\x7f\xc4\x22\xc9\x19\x9d\x53\x1c\x41\x21\x69\xe3\x10\xd0\xf7\xef\x85\x98\x88\xb1\x5f\xc8\xda\xe5\x63\xba\x2b\x62\xf0\x53\x28\xb9\x8f\xc1\x44\x23\x9a\x08\x09\x7c\x32\xef\x21\x14\x33\x2e\x45\xba\x65\x64\x7f\x9a\xe8\xfe\xe3\xc3\x4d\x0f\xa1\x52\xed\x46\xca\xd8\xc0\x31\x31\x04\xf0\x1d\xf0\xde\xb7\x6f\x06\x22\x2b\x14\x01\xea\x3f\x25\x21\x1e\xc5\x53\x16\x00\xba\xe2\x10\x32\x09\x57\xb9\x25\x0a\xd4\xad\x02\xb5\x4e\x6a\x28\x10\x05\x75\xf1\xbb\xbb\xdb\x23\xc5\xc2\xc0\x41\x48\x44\x1a\xa3\xf2\x64\x2a\x20\x31\x5f\x83\x9c\xe7\x3a\xd2\x53\x0d\x46\xad\x29\x5b\x62\x7a\x62\xd4\x4f\x1f\x15\x35\x21\x0e\xc4\x01\x5b\x11\xfa\x49\xb5\x9c\xc7\xbe\x21\x02\x51\x97\x78\x38\x96\xf8\x7a\x2c\xf1\xf3\x71\x20\x8f\x25\x1e\x3e\x1c\x4b\x2c\x19\x93\x42\x72\x1c\xeb\x8c\xba\x57\x03\x14\x44\x42\x0d\x4a\xcc\x99\x64\x3e\xa3\x26\x7a\x19\xcf\xeb\x01\x16\x40\xc1\x97\x8c\x9b\x99\x20\x8e\x63\x13\x6d\x93\x10\x1b\x7e\x4e\x27\x23\x4e\xf9\xd4\x14\x44\x21\x71\x14\x60\xca\xa2\x3c\xbb\x6f\x60\x6e\x9e\x06\x23\xa7\x88\x21\xf6\x91\x7f\x11\x5b\xd3\xed\xc7\x0c\xc2\xc9\x10\xd2\xbc\x7b\xfb\xb8\x60\x7d\xc5\xdf\x5a\x58\xef\xb3\x05\x84\x22\x16\x40\xce\x93\xdb\x6b\x65\xb5\xd9\xac\xee\xa1\x2a\xa2\xdb\x16\x8f\xa1\xef\xb3\x24\x92\x9a\xb0\x68\x70\xcf\x87\xa5\x9d\xe5\x67\x8c\xf1\x39\xc8\x5e\x1e\xd0\x6d\xb2\x04\x1e\x81\x04\xd1\x27\x6c\x20\xa9\x68\x32\x4e\x04\xc2\x90\x54\x18\x3e\x70\xd9\x62\x5b\x79\x5a\x52\xd1\xf7\xd3\x78\xa7\x12\x6e\x20\x3c\x2a\x46\xc0\x25\xfa\x13\x2d\x3f\xde\x41\xe4\xe7\x49\x4b\xa5\xb6\xb0\x57\xa5\x9e\x60\x5f\x13\xea\x16\xe2\xb7\x78\xb5\xfd\x41\xaf\x9e\x3a\x79\xf5\xa4\xf5\xea\x9d\x5d\x39\xae\x8e\x3f\xe4\xd7\xb0\x04\x73\x33\xac\x0e\x3e\x9e\x9e\xe8\xec\xef\x88\x45\x2b\xb2\x9e\xe2\xb8\xd3\x17\x23\x7d\x5a\x91\x75\x47\xaf\x72\xe1\xfe\x1e\x87\xd4\x44\x7f\x66\x5f\xe4\xbf\xa1\x44\x00\x92\x1b\x22\xd0\x8a\x50\x40\x92\x21\xb6\x03\xce\x49\x00\x28\x80\x15\x4e\xa8\x2c\x8e\x25\x1c\x4b\xc2\x22\xc4\x56\xe8\xb7\xdc\x90\xf8\xb7\x1c\xa2\x00\x12\x00\x99\xe8\xa0\xd8\xed\xa7\x0f\xfd\x7d\x48\xd1\x8a\x71\x84\x77\x98\x50\xbc\xa4\x80\x04\x48\x49\xa2\xb5\x38\x89\x01\x8e\x63\x31\xa8\x02\x31\x86\x98\xb2\x7d\x08\xef\x53\x22\x10\xa2\x78\x09\x54\x9c\x2f\x5f\x65\x7d\x4d\xfb\x8c\x84\xf5\x3e\x97\xe6\x8c\x52\x12\xad\x5f\xe2\x00\x4b\x30\x8b\x52\x19\xe2\xaf\x6e\xc2\xd7\x60\xa2\x9b\xc3\xca\x4b\x54\xb9\x69\xa2\xeb\x93\xaa\x19\x62\xe9\x6f\x9e\x15\x3b\x9a\x2d\x41\x48\x42\x18\xd3\x4a\xa1\x1a\x82\xf4\x43\x6b\x28\xe7\x70\x10\x2a\xbd\xca\xfe\xae\x15\x5f\xbb\x39\x98\xe9\x27\x5d\xc3\x24\x02\x5e\x29\x32\x8a\xf8\xeb\xa4\x11\x22\x21\x5e\x6b\x2e\x64\x93\x74\x19\x7d\xff\x6e\x1e\x6f\x14\x99\xcf\xf3\xa3\x40\xcc\x13\x4a\xe7\x8c\x12\xbf\xf8\x3a\x4d\xea\x8b\xaa\x3c\x44\xbb\x43\x10\x4a\xeb\x9e\x5e\xa6\xc3\x85\x65\xbf\x4e\x9c\x99\x3d\xb5\x6c\xaf\x12\x40\x68\x87\x69\x02\x26\xba\x3a\x54\x92\x2b\xfd\x71\xd7\x9b\x39\xd6\xc2\xfb\x32\xb7\xde\x7e\xfa\xe9\xe5\x93\xe5\xd8\x96\x67\xb9\x0b\xf7\x8b\xeb\x59\xd3\x85\x3d\x9c\x5a\xee\x7c\x38\xd2\x80\x6a\x28\xab\x01\x7e\xb4\x6c\xcb\x19\x3e\x2f\x86\xe3\x57\xcb\xf1\x26\xae\x35\x5e\xfc\x7d\xe6\x7a\x29\xae\x1e\xb2\xf9\x66\xdc\x7f\x43\x1f\xd5\x3b\x3b\x76\x17\xae\xe5\xbc\x5a\xce\xe2\xd1\x99\x8f\x16\xf3\x99\xa3\x0b\x79\x7a\x75\x6c\x08\xd7\xbf\x3a\x23\x3c\x34\x20\x7c\x9a\xcd\x3c\xd7\x73\x86\xf3\x12\xa7\x11\xe2\xe1\x43\x53\xce\x0e\x46\x78\xcf\xee\x62\x64\x39\xde\xe2\xf3\xe4\x59\x13\xd7\xc1\x0e\xf3\x01\x4f\xa2\x81\xc8\x9a\x93\xc8\x2a\x5e\xda\x91\xca\xcb\xc1\xa0\x6c\x37\x83\xa2\x91\x74\xd2\xf8\x64\x7d\x79\x1f\x85\x5b\xd8\xd7\xef\xb9\x1a\xdd\x4f\xef\xe4\xed\xb6\xb3\xb7\x4f\xef\xe3\xed\x89\xc2\xd4\x5b\xad\xc2\xe1\x7c\xd2\xce\x86\x9b\x06\x36\x28\x87\x1d\x6b\x38\x5e\xcc\xec\xe7\x2f\x1a\x04\xc9\x13\x68\x40\x70\x5e\x6c\x6f\x32\xad\x55\x81\xe1\x78\x3a\x71\xdd\xc9\xcc\x6e\xb3\xeb\xee\xee\xf6\x07\x50\xb3\x64\x8e\x27\xce\xa5\xa1\x3d\xbe\x35\x0d\x94\x5b\x53\x37\x53\x26\xf6\x3f\xac\x91\x37\x73\x16\x23\x7b\xb2\xb0\xec\xe1\xa7\x67\x6b\xac\xf1\x2f\x2b\x4c\xf6\xc4\x8a\xd2\x4e\x99\x72\xb4\xbb\xb3\x95\x06\x77\x32\xb6\x46\x43\x67\x31\x9a\xd9\xde\x70\x62\x5b\xce\x62\x32\x1d\x3e\x36\x54\xc1\x31\x96\x38\xbe\xb4\x17\xd5\x4c\xa9\xf4\x4e\xec\x89\x77\xa9\xd2\x88\xc8\x37\x2b\x9e\xce\xc6\x56\xf6\x8f\x5e\x89\x52\xa8\x0f\x15\xbc\xff\x2b\x8b\x9a\x7b\x48\x86\xe8\x58\xd3\x99\x67\x2d\x7e\x9d\xd9\x0d\xc0\x25\x84\xa6\x90\x60\xbe\x16\x6a\xd7\xe5\x49\xa4\x3c\x19\x06\x65\x6b\x83\xc2\x0e\xe8\x2f\x24\x5a\xb1\xda\x56\x7e\x97\x34\xd2\xbb\xe6\x2f\x03\x90\x7e\x9d\x80\xb5\x6b\xc5\x40\xb9\xae\x56\x18\xca\x5b\x6d\x0e\x59\xdd\x51\xe6\x87\x21\x4d\x97\x51\x4c\xf3\xf9\x5b\xd5\xe5\x4b\x5a\xe2\x31\x54\x39\xb6\x69\x50\x54\x0c\x52\x9a\x76\x1f\xce\xee\xfe\x7c\xd6\x85\x0f\xe7\x76\xef\x6f\x95\x84\x9f\x19\x8e\xe4\x1f\x4a\x76\x10\x81\x10\x73\xce\x96\x60\x2a\x27\x37\x52\xc6\x8f\x20\xd5\x25\x84\x62\x2c\x37\x26\x1a\x6c\x00\x53\xb9\xd9\xd7\xb7\x4a\xe3\xae\xab\x65\x0e\x38\x20\x17\x83\xa7\xa7\x3a\x40\x0b\x96\x70\x1f\x84\x59\xa6\x10\x7e\x6f\x4d\x61\x7a\xec\xf7\x04\x84\xca\xb0\xf4\xe3\xc7\x89\x89\xee\xaf\xaf\xc3\xda\x6a\x08\x21\xe3\x7b\x13\x7d\xb8\xff\x38\x25\x79\xe8\xa8\x80\xce\x78\x37\x1d\xf0\xea\xa9\xd8\x31\x9a\x84\x30\x4d\x2f\xee\x07\xb7\x2e\xb8\xac\xe9\x46\x17\x95\xf2\x14\x75\x9e\x07\xb8\xf3\x65\xa3\xe6\x28\x0e\x66\x11\xdd\x9b\x28\xed\x88\xe7\x6e\x1f\xba\x51\xc3\xc5\x56\x6c\x3b\x59\xa1\x55\x7d\x6e\x34\x70\xb1\x1d\xed\x1d\xb3\x9b\x51\x0d\x2f\xf5\x3a\x7b\xce\x17\xcd\x36\xbd\x39\x87\x2e\xa0\x4f\x3b\x79\xf2\xc0\xa8\x0c\xcf\x57\xec\x86\x73\x27\xdc\x68\x67\x46\x07\x15\x9a\x73\x17\xa6\xbd\x83\x92\x36\x90\xee\x39\xf5\xcb\x31\x8f\xaa\xaf\xed\xf0\xc9\xc0\xa4\x34\x87\xc3\x9a\x64\x33\x0b\xc2\xa2\xfe\xf6\x21\x9b\x8e\xed\x6e\x96\x20\x71\x39\x4d\x99\x26\x12\x4b\x12\xad\xff\x09\xcb\x0d\x63\xdb\x91\x3a\xd2\x69\x1f\xa2\x85\xc5\x69\xe3\x8f\xfc\xb8\x51\x1b\x09\xf5\x8a\x55\x61\xf6\xca\x00\x84\x20\x36\xfd\x62\x7e\x04\xbc\x5f\x87\xeb\x17\xf4\xed\x21\xb4\xc2\x84\x26\x1c\xca\x97\xfd\xcf\x98\xa4\xad\xde\xa7\x04\x22\x99\xdb\x98\xc7\xc7\xc7\x9f\x92\x28\xa0\x70\xc1\x40\xae\x9a\x75\x98\xca\x70\xbb\x79\x3c\x74\x88\x7f\xeb\xef\x49\xe8\xd0\x8b\x0a\x17\x8d\xcc\x41\xc2\x8c\xdd\x0d\xa6\xf1\x06\xdf\x18\x69\x00\x7a\x08\xf1\x84\x42\xf1\x23\x12\x8e\xc9\x23\x67\x49\x5c\xcd\xe4\x0f\x51\x40\xe8\x90\xd5\x6a\xbb\x84\xca\x1e\x59\x0c\x79\xac\xab\xed\x91\x63\x0d\x3d\xab\x78\x78\x99\x8f\xcb\x07\xa5\xf1\xe5\x7b\xa9\x25\x20\xaa\xcc\xb0\x3f\x22\xe0\x06\x87\x15\x70\x88\x7c\xf8\xeb\xa6\xe6\xc8\xd1\x93\x14\xa9\xd9\xd1\xe4\xe7\x34\x47\x9a\x2c\x69\x32\x75\x9a\xab\x93\x7c\x9d\x24\x29\x97\xf0\x09\xf7\x13\x22\x97\x1c\xf0\x16\xb8\x50\x76\x32\x8e\x91\xe8\xdf\xe0\x67\xb0\xca\x8e\xe4\x78\xb5\x22\x3e\x65\x6b\xcd\x6a\x0c\xbc\x48\x86\x66\x93\xb3\x44\x82\x66\x5d\x72\xec\xd7\xd6\xf3\xbb\x9c\xbf\x01\x7f\xab\x2e\xc7\x9c\x7d\xdd\x97\x33\xca\x03\xbd\xf2\x28\x67\xa6\x32\xae\xb0\xa9\xca\xb0\xdb\x36\x11\x2d\x7b\x9b\x20\x01\xf8\x98\x1b\x95\xdf\x26\x82\xfc\x7d\xf1\x94\x9c\xd9\x90\xb0\x50\xfa\x59\xdd\xca\x59\xf1\xbf\x43\xda\xdc\x59\xa3\xf0\xbd\x13\x45\xaf\xae\xda\xd8\xf9\x83\xbc\x8c\x59\x90\xcf\xea\xdb\x5f\xab\xde\xd8\x9c\x5e\x31\x25\xc1\xc5\xed\x69\x57\x9d\x6a\x6d\x4b\x87\xce\x5c\x1c\x62\x67\x7a\x52\x53\xe9\xd3\xf1\xe8\x8d\x4c\x3a\xe1\x52\x17\x36\x5d\xc4\xa7\x8a\x51\x85\xc3\xda\xfa\x57\xa3\x57\x03\xc1\x4e\xab\x60\x03\xd3\x34\x95\x50\xcf\xb9\x13\xd6\xa1\xe3\x1e\x56\x2e\x8d\xad\x67\x4b\x59\xd2\xb0\xf3\x5c\xdd\x3c\x57\x39\x9b\x6a\x67\x4b\xf5\x6c\xae\x9f\xcd\x15\x34\xdd\x09\xca\x49\x50\x7d\x59\x5b\x5a\x95\x9e\xad\x2e\x1d\xd5\xdb\x03\xa3\x0b\x26\xf5\xff\x7f\x99\xbd\xbb\x31\x0a\xa5\x17\x70\xfa\xea\xaa\x0b\x9d\xdf\x81\xc8\x0d\xac\x2d\x2c\xae\x67\x32\x7d\xdd\xe8\x96\xc8\x86\x7e\xaa\xed\xa8\x4a\x4f\xdd\x0b\x09\xa1\xa1\x64\x44\x19\x60\xff\x75\xb9\x91\xfd\x0f\x82\xff\x42\x6a\x74\xaf\x71\xc5\xf0\x41\x7d\x77\xfe\x4f\x00\x00\x00\xff\xff\x78\x3d\xa7\x3f\x2a\x27\x00\x00"),
		},
		"/kuma-cp/rbac.yaml": &vfsgen۰CompressedFileInfo{
			name:             "rbac.yaml",
			modTime:          time.Date(2020, 7, 7, 21, 2, 22, 428751994, time.UTC),
			uncompressedSize: 2487,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x10\xf9\x6e\x1f\x60\x17\xbb\x0d\xb9\x6d\xc5\x30\x0c\xdb\x7a\x68\x87\xdd\x19\x99\x8e\x39\xcb\x92\x47\x51\xe9\xd6\xa0\xff\x7d\x90\xdd\xb4\x71\xe2\xb4\x49\xd7\x61\x3b\xd9\x22\xa4\xf7\xa8\xc7\x27\x32\xcb\xf3\x3c\xc3\x8e\xbf\x92\x04\xf6\x6e\x0e\xb2\x40\x53\x60\xd4\xda\x0b\xdf\xa0\xb2\x77\x45\xf3\x3a\x14\xec\xcf\x56\xaf\xb2\x86\x5d\x39\x87\x73\x1b\x83\x92\x5c\x7a\x4b\x59\x4b\x8a\x25\x2a\xce\x33\x00\x87\x2d\xcd\xa1\x89\x2d\xce\x8d\x77\x2a\xde\xe6\x9d\x45\x47\x99\x44\x4b\x61\x9e\xe5\x80\x1d\xbf\x17\x1f\xbb\x90\xb6\xe7\x30\x9b\x65\x00\x42\xc1\x47\x31\x74\x17\x4b\x20\xa1\x43\x43\xa1\x5f\x76\xbe\x1c\x7e\x02\xc9\x8a\x87\xe8\x8a\x64\x71\xb7\x7b\x49\xda\x7f\x2d\x87\xe1\xe7\x1a\xd5\xd4\xc7\x31\xd1\x8a\x9c\xee\xe0\x19\x21\x54\x1a\x98\xa7\x91\xd2\xf5\x0a\xf6\xfb\x70\x49\x85\xfe\xba\x61\xbc\x64\x17\x78\x59\xeb\x10\x6d\x29\xd4\x47\xde\x61\x27\x9d\xd8\x95\xe3\xcc\x7a\x12\xb2\xa4\x74\x42\x92\x9d\xf8\x1f\x3f\x95\xda\xce\xa2\xfe\x3b\x79\x9c\x05\x45\x8d\x07\xd2\xd9\x23\x3c\x9e\x45\x05\xab\x8a\x4d\x47\xd2\x72\x48\xf6\x0e\xdb\x61\xeb\x97\xa3\xb5\xf8\xa8\x34\x8a\xa8\xdc\xfb\xb0\xc2\x68\x95\xdd\x37\x32\x7a\x8f\x63\x58\x4c\x64\x5d\x08\x61\x43\x32\xc4\x6a\x42\xab\xb5\xa9\xc9\x34\xc7\xc9\xbb\x5e\xe7\xc0\x15\xd0\x77\x28\x3e\xc6\x16\xcf\xbb\xcf\xbe\x24\x98\x09\xb5\x5e\x69\x06\xb7\xb7\xdb\x05\x48\x9b\xc9\x95\x29\xba\xa3\xc2\xb4\xc9\x37\x2f\xe8\xac\x62\x87\x96\x6f\x86\x2c\xef\x93\xea\x0f\xfd\x3f\x9b\xc2\x3a\xa0\xe9\x83\x87\x5f\x14\xf2\xe1\xed\x3c\x01\x7b\xa7\x56\x71\x7e\xf1\xe1\x9d\xc3\x85\xa5\x43\x5a\xa4\x9e\x65\x1c\x17\xc6\x99\xea\x00\xa9\x23\xbd\xf6\xd2\xe4\xa8\x8a\xa6\x6e\xc9\x69\x5e\x52\xc5\x8e\x37\x15\x1e\xb1\x0f\xe5\xdb\x2a\xe0\xf6\x0b\x99\x2e\xd1\x7f\xb0\x42\xcb\xc9\xbd\x29\x1d\x50\xdf\x90\x83\x05\x55\x5e\x08\x38\x84\x48\xec\x96\xd0\x7e\xf9\x74\x05\x86\x44\xf7\x7d\x9d\xba\x30\x39\x65\xb3\xdd\x86\x27\x5c\x9e\x70\x85\x56\x4c\xd7\xd3\xdd\xec\xf7\x5a\xfc\x5b\x76\x25\xbb\xe5\x91\x9d\xde\x5b\xba\xa4\x2a\xed\xd9\x5c\xe6\x11\xbe\x0c\x60\x7f\xa2\x3c\x82\x1e\xe2\x22\x3d\xc0\x7e\x94\x0c\x07\xaf\x86\xa9\xf0\xc6\x18\x1f\x9d\x8e\xce\xe6\xe3\xb3\xf0\x30\x59\xe6\xb0\x5e\x43\x71\xb1\x59\xf6\x0e\x3a\x5d\xa2\xe3\xc7\xdf\xe3\xd4\xa7\x0c\xc7\x40\x46\x68\x77\x66\xfd\x81\xbe\x3d\xc5\x6d\xbc\xab\x78\xd9\x62\xf7\xf2\xf4\xcf\x13\xff\x24\x63\x3e\x51\x83\xe7\xd9\xf6\xef\xf9\xf5\x57\x00\x00\x00\xff\xff\x7b\x82\x36\xc6\xb7\x09\x00\x00"),
		},
		"/namespace.yaml": &vfsgen۰FileInfo{
			name:    "namespace.yaml",
			modTime: time.Date(2020, 7, 7, 21, 2, 22, 428751994, time.UTC),
			content: []byte("\x0a\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x7b\x7b\x20\x2e\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x20\x7d\x7d\x0a\x20\x20\x6c\x61\x62\x65\x6c\x73\x3a\x0a\x20\x20\x20\x20\x6b\x75\x6d\x61\x2e\x69\x6f\x2f\x73\x79\x73\x74\x65\x6d\x2d\x6e\x61\x6d\x65\x73\x70\x61\x63\x65\x3a\x20\x22\x74\x72\x75\x65\x22\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/crds"].(os.FileInfo),
		fs["/kuma-cp"].(os.FileInfo),
		fs["/namespace.yaml"].(os.FileInfo),
	}
	fs["/crds"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/crds/kuma.io_circuitbreaker.yaml"].(os.FileInfo),
		fs["/crds/kuma.io_dataplaneinsights.yaml"].(os.FileInfo),
		fs["/crds/kuma.io_dataplanes.yaml"].(os.FileInfo),
		fs["/crds/kuma.io_faultinjection.yaml"].(os.FileInfo),
		fs["/crds/kuma.io_healthchecks.yaml"].(os.FileInfo),
		fs["/crds/kuma.io_meshes.yaml"].(os.FileInfo),
		fs["/crds/kuma.io_proxytemplates.yaml"].(os.FileInfo),
		fs["/crds/kuma.io_trafficlogs.yaml"].(os.FileInfo),
		fs["/crds/kuma.io_trafficpermissions.yaml"].(os.FileInfo),
		fs["/crds/kuma.io_trafficroutes.yaml"].(os.FileInfo),
		fs["/crds/kuma.io_traffictraces.yaml"].(os.FileInfo),
	}
	fs["/kuma-cp"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/kuma-cp/app.yaml"].(os.FileInfo),
		fs["/kuma-cp/rbac.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
